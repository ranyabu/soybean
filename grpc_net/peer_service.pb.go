// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_network/peer_service.proto

package grpc_net

import (
	"fmt"
	"github.com/golang/protobuf/proto"
	"github.com/soybean/api"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("grpc_network/peer_service.proto", fileDescriptor_271c6162f2511c87) }

var fileDescriptor_271c6162f2511c87 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0x2f, 0x2a, 0x48,
	0x8e, 0xcf, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x2f, 0x48, 0x4d, 0x2d, 0x8a, 0x2f, 0x4e,
	0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x41, 0x56, 0x20,
	0x25, 0x51, 0x52, 0x59, 0x90, 0x5a, 0x0c, 0x51, 0x97, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x0e, 0x55,
	0x67, 0xe4, 0xca, 0xc5, 0x1d, 0x90, 0x9a, 0x5a, 0x14, 0x0c, 0xd1, 0x2c, 0x64, 0xc6, 0xc5, 0xe6,
	0x91, 0x98, 0x97, 0x92, 0x93, 0x2a, 0x24, 0xa4, 0x07, 0xd6, 0xa3, 0x07, 0x92, 0xf5, 0x85, 0x68,
	0x91, 0xc2, 0x22, 0xa6, 0xc4, 0xa0, 0xc1, 0x68, 0xc0, 0xe8, 0xc4, 0x17, 0x85, 0x62, 0x61, 0x12,
	0x1b, 0xd8, 0x74, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x64, 0x1b, 0x18, 0xa8, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerServiceClient interface {
	Handle(ctx context.Context, opts ...grpc.CallOption) (PeerService_HandleClient, error)
}

type peerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPeerServiceClient(cc *grpc.ClientConn) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) Handle(ctx context.Context, opts ...grpc.CallOption) (PeerService_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PeerService_serviceDesc.Streams[0], "/grpc_network.PeerService/Handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerServiceHandleClient{stream}
	return x, nil
}

type PeerService_HandleClient interface {
	Send(*api.PeerMessage) error
	Recv() (*api.PeerMessage, error)
	grpc.ClientStream
}

type peerServiceHandleClient struct {
	grpc.ClientStream
}

func (x *peerServiceHandleClient) Send(m *api.PeerMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerServiceHandleClient) Recv() (*api.PeerMessage, error) {
	m := new(api.PeerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerServiceServer is the server API for PeerService service.
type PeerServiceServer interface {
	Handle(PeerService_HandleServer) error
}

func RegisterPeerServiceServer(s *grpc.Server, srv PeerServiceServer) {
	s.RegisterService(&_PeerService_serviceDesc, srv)
}

func _PeerService_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServiceServer).Handle(&peerServiceHandleServer{stream})
}

type PeerService_HandleServer interface {
	Send(*api.PeerMessage) error
	Recv() (*api.PeerMessage, error)
	grpc.ServerStream
}

type peerServiceHandleServer struct {
	grpc.ServerStream
}

func (x *peerServiceHandleServer) Send(m *api.PeerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerServiceHandleServer) Recv() (*api.PeerMessage, error) {
	m := new(api.PeerMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PeerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_network.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Handle",
			Handler:       _PeerService_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_network/peer_service.proto",
}
